#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2013 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.


sub LeaveScript {
    my $exitCode = $_[0];
    my $comment  = $_[1];

    # unlock exporter
    if (defined(fileno(LOCK))) {
        # only remove the lockfile if we have an exclusive lock
        unlink($cfg->{export}->{lock}) if flock(LOCK, LOCK_EX|LOCK_NB);
        close(LOCK);
    }

    print $state[$exitCode]." - $comment\n";
    exit $exitCode;
}

sub beVerbose {
    my $type = shift;
    my $text = shift;

    if (defined $opt->{verbose}) {
        # generate message
        my $message = localtime(time)." | Verbose: $type: $text\n";

        # should write log to file or STDOUT?
        if ($opt->{verbose} ne "") {
            open(LOGF,">>$opt->{verbose}") || die $!;
            print LOGF $message;
            close(LOGF);
        } else {
            print $message;
        }
    }
}

sub DebugOutput {
    my $type = shift;
    my $text = shift;
    my $dbg_verbosity = shift;

    # default to lowest verbosity
    $dbg_verbosity = 1 if (!defined $dbg_verbosity);

    if (defined $opt->{debug}) {
        return if ($opt->{debug_verbosity} < $dbg_verbosity);

        # generate message
        my $message = localtime(time)." | Debug: $type: $text\n";

        # should write log to file or STDOUT?
        if ($opt->{debug} ne "") {
            open(LOGF,">>$opt->{debug}") || die $!;
            print LOGF $message;
            close(LOGF);
        } else {
            print $message;
        }
    }
}

sub createDirs {
    my $searchDN    = shift;
    my $writeFolder = shift;
    my $dirStructure;

    # - search ldap tree downwards
    # - check if folder already exists
    # - create folder (if needed)
    my $result = LDAPsearch($ldap, $searchDN, "single", "ou=*");
    foreach(keys %{$result}) {
        my $folder = $writeFolder.'/'.$result->{$_}->{ou}."/";
        if (!-d $folder) {
            mkdir("$folder");
            beVerbose('CREATE DIR', $folder);
        }

        createDirs($_, $folder);
    }
}

sub BuildFilepath {
    my $filedn = shift;
    my $filepath = shift;
    $filepath .= '/';

    # build file path
    my $path = $filedn;
    $path =~ s/,$cfg->{ldap}->{baseDN}//;
    my @path = split(",", $path);
    @path = reverse(@path);
    foreach my $items (@path) {
        # file or folder?
        if ($items =~ /cn=/) {
            my $val = (split(/\=/, $items))[1];
            $filepath .= $val.'.cfg';
        } else {
            my $val = (split(/\=/, $items))[1];
            $filepath .= $val.'/';
        }
    }

    return $filepath;
}

sub copyGeneric {
    my $source = shift;
    my $target = shift;

    qx(cp $source $target/);
}

sub checkRemoteDir {
    my $host = shift;
    my $remoteDir = shift;
    my $port = shift;
    my $cmd;

    if (defined $port) {
        beVerbose('CHECK', "login and dir on '$host' via SSH port $port");
        $cmd = "ssh -p $port -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -d $remoteDir\" 2>/dev/null";
    } else {
        beVerbose('CHECK', "login and dir on '$host'");
        $cmd = "ssh -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -d $remoteDir\" 2>/dev/null";
    }
    my $val = system($cmd);

    if ($val != 0) {
        if ($val == 512) {
            LeaveScript(2, "Can't locate directory $remoteDir on $host");
        } elsif ($val == 65280) {
            LeaveScript(2, "Can't login on $host");
        } else {
            LeaveScript(2, "Unknown error during connection / test");
        }
    }

    return 'exists';
}

sub checkRemoteFile {
    my $host = shift;
    my $remoteFile = shift;
    my $port = shift;

    if (defined $port) {
        beVerbose('CHECK', "login and file on '$host' via SSH port $port");
        my $cmd = "ssh -p $port -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -f $remoteFile\" 2>/dev/null";
    } else {
        beVerbose('CHECK', "login and file on '$host'");
        my $cmd = "ssh -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -f $remoteFile\" 2>/dev/null";
    }
    my $val = system($cmd);

    if ($val != 0) {
        if ($val == 512) {
            return 'no file found'
        } elsif ($val == 65280) {
            LeaveScript(2, "Can't login on $host");
        } else {
            LeaveScript(2, "Unknown error during connection / test");
        }
    }

    return 'exists';
}

1;

# vi: sw=4 ts=4 expandtab :

