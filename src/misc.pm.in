#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2014 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.


sub LeaveScript {
    my $exitCode = $_[0];
    my $comment  = $_[1];

    # unlock exporter
    if (defined(fileno(LOCK))) {
        # only remove the lockfile if we have an exclusive lock
        unlink($cfg->{export}->{lock}) if flock(LOCK, LOCK_EX|LOCK_NB);
        close(LOCK);
    }

    print $state[$exitCode]." - $comment\n";
    exit $exitCode;
}

sub beVerbose {
    my $type = shift;
    my $text = shift;

    if (defined $opt->{verbose}) {
        # generate message
        my $message = localtime(time)." | Verbose: $type: $text\n";

        # should write log to file or STDOUT?
        if ($opt->{verbose} ne "") {
            open(LOGF,">>$opt->{verbose}") || die $!;
            print LOGF $message;
            close(LOGF);
        } else {
            print $message;
        }
    }
}

sub DebugOutput {
    my $type = shift;
    my $text = shift;
    my $dbg_verbosity = shift;

    # default to lowest verbosity
    $dbg_verbosity = 1 if (!defined $dbg_verbosity);

    if (defined $opt->{debug}) {
        return if ($opt->{debug_verbosity} < $dbg_verbosity);

        # generate message
        my $message = localtime(time)." | Debug: $type: $text\n";

        # should write log to file or STDOUT?
        if ($opt->{debug} ne "") {
            open(LOGF,">>$opt->{debug}") || die $!;
            print LOGF $message;
            close(LOGF);
        } else {
            print $message;
        }
    }
}

sub createDirs {
    my $searchDN    = shift;
    my $writeFolder = shift;
    my $dirStructure;

    # - search ldap tree downwards
    # - check if folder already exists
    # - create folder (if needed)
    my $result = LDAPsearch($ldap, $searchDN, "single", "ou=*");
    foreach(keys %{$result}) {
        my $folder = $writeFolder.'/'.$result->{$_}->{ou}."/";
        if (!-d $folder) {
            mkdir("$folder");
            beVerbose('CREATE DIR', $folder);
        }

        createDirs($_, $folder);
    }
}

sub BuildFilepath {
    my $filedn = shift;
    my $filepath = shift;
    $filepath .= '/';
    
    my $suffix = (defined($cfg->{export}->{format}) && $cfg->{export}->{format} == 2) ? ".conf" : ".cfg";

    # build file path
    my $path = $filedn;
    $path =~ s/,$cfg->{ldap}->{baseDN}//;
    my @path = split(",", $path);
    @path = reverse(@path);
    foreach my $items (@path) {
        # file or folder?
        if ($items =~ /cn=/) {
            my $val = (split(/\=/, $items))[1];
            $filepath .= $val.$suffix;
        } else {
            my $val = (split(/\=/, $items))[1];
            $filepath .= $val.'/';
        }
    }

    return $filepath;
}

sub copyGeneric {
    my $source = shift;
    my $target = shift;

    qx(cp $source $target/);
}

sub checkRemoteDir {
    my $host = shift;
    my $remoteDir = shift;
    my $port = shift;
    my $cmd;

    if (defined $port) {
        beVerbose('CHECK', "login and dir on '$host' via SSH port $port");
        $cmd = "ssh -p $port -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -d $remoteDir\" 2>/dev/null";
    } else {
        beVerbose('CHECK', "login and dir on '$host'");
        $cmd = "ssh -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -d $remoteDir\" 2>/dev/null";
    }
    my $val = system($cmd);

    if ($val != 0) {
        if ($val == 512) {
            LeaveScript(2, "Can't locate directory $remoteDir on $host");
        } elsif ($val == 65280) {
            LeaveScript(2, "Can't login on $host");
        } else {
            LeaveScript(2, "Unknown error during connection / test");
        }
    }

    return 'exists';
}

sub checkRemoteFile {
    my $host = shift;
    my $remoteFile = shift;
    my $port = shift;

    if (defined $port) {
        beVerbose('CHECK', "login and file on '$host' via SSH port $port");
        my $cmd = "ssh -p $port -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -f $remoteFile\" 2>/dev/null";
    } else {
        beVerbose('CHECK', "login and file on '$host'");
        my $cmd = "ssh -o PasswordAuthentication=no "; $cmd .= $host ." \"ls -f $remoteFile\" 2>/dev/null";
    }
    my $val = system($cmd);

    if ($val != 0) {
        if ($val == 512) {
            return 'no file found'
        } elsif ($val == 65280) {
            LeaveScript(2, "Can't login on $host");
        } else {
            LeaveScript(2, "Unknown error during connection / test");
        }
    }

    return 'exists';
}

sub slurp {
    my $file = shift;

    if ( -f $file ) {
        open ( my $fh, "<", $file ) or die "Could not open $file: $!";
        return do {
            <$fh>;
        }
    } elsif (! -r $file) {
        print " ERROR: $file not readable. check permissions/user!\n"
    } else {
        print " ERROR: $file does not exist\n";
    }
}

sub escape_str {
    my $str = shift;

    $str =~s/\\/\\\\/g;
    $str =~ s/"/\\"/g;

    return $str;
}
sub escape_shell_meta {
    my $str = shift;

    $str =~ s/([;<>`'":&!#\$\[\]\{\}\(\)\*\|])/\\$1/g;
    return $str;
}

sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}

sub str2arr_by_delim_without_excludes {
    my $str = shift;
    my $delim = shift;
    my $sort = shift;
    my $exclude = shift;
    my @arr = ();

    @arr = map { s/^\s+//; s/\s+$//; $_ }
            grep { !/^!/ }
            split (/$delim/, $str);

    if ($sort == 1) {
        @arr = sort (@arr);
    }

    return @arr;
}

sub strip_object_name {
    my $obj_str = shift;

    #$obj_str =~ s/[`~!\\\$%\^&\*|'"<>\?,\(\)=:]/_/g;
    $obj_str =~ s/[:]/_/g;

    return $obj_str;
}

sub print_sorted_hash {
    my $hash = shift;

    foreach my $key (sort keys %{$hash}) {
        print "$key = $hash->{$key}\n";
    }
}

# convert notification_options to state|type_filter
sub convert_notification_options_to_filter_2x {
    my $notification_options = shift;
    my $filter = ();
    my $is_host = shift;

    @{$filter->{'state'}} = ();
    @{$filter->{'type'}} = ();

    # define all types
    my $filter_names = {
        'o' => 'OK', #Up for hosts
        'w' => 'Warning',
        'c' => 'Critical',
        'u' => 'Unknown',
        'd' => 'Down',
        's' => 'DowntimeStart | DowntimeEnd | DowntimeRemoved',
        'r' => 'Recovery',
        'f' => 'FlappingStart | FlappingEnd'
    };
    my $filter_by = {
        'o' => 'state',
        'w' => 'state',
        'c' => 'state',
        'u' => 'state',
        'd' => 'state',
        's' => 'type',
        'r' => 'type',
        'f' => 'type'
    };

    # split the string
    my @options = str2arr_by_delim_without_excludes($notification_options, ',', 1);

    # verify if there's 'n' (none) and ignore the rest then
    if (grep /n/, @options) {
        push @{$filter->{'state'}}, 0;
        push @{$filter->{'type'}}, 0;
        return $filter;
    }

    # recovery requires state up
    if (grep /r/, @options) {
        push @{$filter->{'state'}}, 'OK';
    }

    # always add Problem|Custom|OK
    push @{$filter->{'type'}}, 'Problem';
    push @{$filter->{'type'}}, 'Custom';
    push @{$filter->{'state'}}, 'OK';

    # verify if there's 'a' (all) and add all filters
    if (grep /a/, @options) {
        foreach my $by (keys %{$filter_by}) {
            my $value = $filter_names->{$by};

            if ($value eq "OK" && $is_host == 1) {
                $value = "Up";
            }

            push @{$filter->{$filter_by->{$by}}}, $value;
        }
        return $filter;
    }

    # the selective way
    foreach my $option (@options) {

        my $value = $filter_names->{$option};

        if ($value eq "OK" && $is_host == 1) {
            $value = "Up";
        }

        push @{$filter->{$filter_by->{$option}}}, $value;
    }

    return $filter;
}

sub convert_dependendy_failure_criteria_2x {
    my $fail_criteria = shift;
    my $type = shift;
    my $is_host = shift;

    my $filter = ();
    @{$filter->{'state'}} = ();

    # define all types - p not supported
    my $filter_names = {
        'o' => 'OK', #Up for hosts
        'w' => 'Warning',
        'c' => 'Critical',
        'u' => 'Unknown',
        'd' => 'Down',
    };

    # by default checks are run
    # but notifications suppressed
    if ($type eq 'check') {
        $filter->{'runeverything'} = 1;
    } else {
        $filter->{'runeverything'} = 0;
    }

    # host o,d,u.p,n
    # service o,w,u,c,p,n
    my @options = str2arr_by_delim_without_excludes($fail_criteria, ',', 1);

    if (grep(/n/, @options)) {
        push @{$filter->{'state'}}, 'StateFilterOK';
        $filter->{'runeverything'} = 1;
        return $filter;
    }

    foreach my $option (@options) {
        next if !defined($filter_names->{$option});

        my $value = $filter_names->{$option};

        if ($value eq "OK" && $is_host == 1) {
            $value = "Up";
        }

        #skip unreachable
        next if ($value eq "Unknown" && $is_host == 1);

        push @{$filter->{'state'}}, $value;
    }

    return $filter;
}

sub convert_legacy_command_macros_2x {
    my $str = shift;

    # http://docs.icinga.org/icinga2/snapshot/chapter-8.html#runtime-macros

    # custom vars as macros
    $str =~ s/\$_HOST(\w+)\$/\$host.vars.$1\$/g;
    $str =~ s/\$_SERVICE(\w+)\$/\$service.vars.$1\$/g;

    # user/contact macros
    $str =~ s/\$CONTACTNAME\$/\$user.name\$/g;
    $str =~ s/\$CONTACTALIAS\$/\$user.display_name\$/g;
    $str =~ s/\$CONTACTEMAIL\$/\$user.email\$/g;
    $str =~ s/\$CONTACTPAGER\$/\$user.pager\$/g;
    $str =~ s/\$CONTACTADDRESS1\$/\$user.vars.address1\$/g;
    $str =~ s/\$CONTACTADDRESS2\$/\$user.vars.address2\$/g;
    $str =~ s/\$CONTACTADDRESS3\$/\$user.vars.address3\$/g;
    $str =~ s/\$CONTACTADDRESS4\$/\$user.vars.address4\$/g;
    $str =~ s/\$CONTACTADDRESS5\$/\$user.vars.address5\$/g;
    $str =~ s/\$CONTACTADDRESS6\$/\$user.vars.address6\$/g;

    # service
    $str =~ s/\$SERVICEDESC\$/\$service.description\$/g;
    $str =~ s/\$SERVICEDISPLAYNAME\$/\$service.display_name\$/g;
    $str =~ s/\$SERVICECHECKCOMMAND\$/\$service.check_command\$/g;
    $str =~ s/\$SERVICESTATE\$/\$service.state\$/g;
    $str =~ s/\$SERVICESTATEID\$/\$service.state_id\$/g;
    $str =~ s/\$SERVICESTATETYPE\$/\$service.state_type\$/g;
    $str =~ s/\$SERVICEATTEMPT\$/\$service.check_attempt\$/g;
    $str =~ s/\$MAXSERVICEATTEMPT\$/\$service.max_check_attempts\$/g;
    $str =~ s/\$LASTSERVICESTATE\$/\$service.last_state\$/g;
    $str =~ s/\$LASTSERVICESTATEID\$/\$service.last_state_id\$/g;
    $str =~ s/\$LASTSERVICESTATETYPE\$/\$service.last_state_type\$/g;
    $str =~ s/\$LASTSERVICESTATECHANGE\$/\$service.last_state_change\$/g;
    $str =~ s/\$SERVICEDURATIONSEC\$/\$service.duration_sec\$/g;
    $str =~ s/\$SERVICELATENCY\$/\$service.latency\$/g;
    $str =~ s/\$SERVICEEXECUTIONTIME\$/\$service.execution_time\$/g;
    $str =~ s/\$SERVICEOUTPUT\$/\$service.output\$/g;
    $str =~ s/\$SERVICEPERFDATA\$/\$service.perfdata\$/g;
    $str =~ s/\$LASTSERVICECHECK\$/\$service.last_check\$/g;
    $str =~ s/\$SERVICENOTES\$/\$service.notes\$/g;
    $str =~ s/\$SERVICENOTESURL\$/\$service.notes_url\$/g;
    $str =~ s/\$SERVICEACTIONURL\$/\$service.action_url\$/g;

    # host
    $str =~ s/\$HOSTADDRESS\$/\$address\$/g; # special case for 2.x, there is no fallback to $host.name$!
    $str =~ s/\$HOSTADDRESS6\$/\$address6\$/g; # special case for 2.x, there is no fallback to $host.name$!
    $str =~ s/\$HOSTNAME\$/\$host.name\$/g;
    $str =~ s/\$HOSTDISPLAYNAME\$/\$host.display_name\$/g;
    $str =~ s/\$HOSTCHECKCOMMAND\$/\$host.check_command\$/g;
    $str =~ s/\$HOSTALIAS\$/\$host.display_name\$/g;
    $str =~ s/\$HOSTSTATE\$/\$host.state\$/g;
    $str =~ s/\$HOSTSTATEID\$/\$host.state_id\$/g;
    $str =~ s/\$HOSTSTATETYPE\$/\$host.state_type\$/g;
    $str =~ s/\$HOSTATTEMPT\$/\$host.check_attempt\$/g;
    $str =~ s/\$MAXHOSTATTEMPT\$/\$host.max_check_attempts\$/g;
    $str =~ s/\$LASTHOSTSTATE\$/\$host.last_state\$/g;
    $str =~ s/\$LASTHOSTSTATEID\$/\$host.last_state_id\$/g;
    $str =~ s/\$LASTHOSTSTATETYPE\$/\$host.last_state_type\$/g;
    $str =~ s/\$LASTHOSTSTATECHANGE\$/\$host.last_state_change\$/g;
    $str =~ s/\$HOSTDURATIONSEC\$/\$host.duration_sec\$/g;
    $str =~ s/\$HOSTLATENCY\$/\$host.latency\$/g;
    $str =~ s/\$HOSTEXECUTIONTIME\$/\$host.execution_time\$/g;
    $str =~ s/\$HOSTOUTPUT\$/\$host.output\$/g;
    $str =~ s/\$HOSTPERFDATA\$/\$host.perfdata\$/g;
    $str =~ s/\$LASTHOSTCHECK\$/\$host.last_check\$/g;
    $str =~ s/\$HOSTNOTES\$/\$host.notes\$/g;
    $str =~ s/\$HOSTNOTESURL\$/\$host.notes_url\$/g;
    $str =~ s/\$HOSTACTIONURL\$/\$host.action_url\$/g;
    $str =~ s/\$TOTALSERVICES\$/\$host.num_services\$/g;
    $str =~ s/\$TOTALSERVICESOK\$/\$host.num_services_ok\$/g;
    $str =~ s/\$TOTALSERVICESWARNING\$/\$host.num_services_warning\$/g;
    $str =~ s/\$TOTALSERVICESUNKNOWN\$/\$host.num_services_unknown\$/g;
    $str =~ s/\$TOTALSERVICESCRITICAL\$/\$host.num_services_critical\$/g;

    # command
    $str =~ s/\$COMMANDNAME\$/\$command.name\$/g;

    # notification
    $str =~ s/\$NOTIFICATIONTYPE\$/\$notification.type\$/g;
    $str =~ s/\$NOTIFICATIONAUTHOR\$/\$notification.author\$/g;
    $str =~ s/\$NOTIFICATIONCOMMENT\$/\$notification.comment\$/g;
    $str =~ s/\$NOTIFICATIONAUTHORNAME\$/\$notification.author\$/g;
    $str =~ s/\$NOTIFICATIONAUTHORALIAS\$/\$notification.author\$/g;

    # global runtime
    $str =~ s/\$TIMET\$/\$icinga.timet\$/g;
    $str =~ s/\$LONGDATETIME\$/\$icinga.long_date_time\$/g;
    $str =~ s/\$SHORTDATETIME\$/\$icinga.short_date_time\$/g;
    $str =~ s/\$DATE\$/\$icinga.date\$/g;
    $str =~ s/\$TIME\$/\$icinga.time\$/g;
    $str =~ s/\$PROCESSSTARTTIME\$/\$icinga.uptime\$/g;

    # global stats
    $str =~ s/\$TOTALHOSTSUP\$/\$icinga.num_hosts_up\$/g;
    $str =~ s/\$TOTALHOSTSDOWN\$/\$icinga.num_hosts_down\$/g;
    $str =~ s/\$TOTALHOSTSUNREACHABLE\$/\$icinga.num_hosts_unreachable\$/g;
    $str =~ s/\$TOTALSERVICESOK\$/\$icinga.num_services_ok\$/g;
    $str =~ s/\$TOTALSERVICESWARNING\$/\$icinga.num_services_warning\$/g;
    $str =~ s/\$TOTALSERVICESCRITICAL\$/\$icinga.num_services_critical\$/g;
    $str =~ s/\$TOTALSERVICESUNKNOWN\$/\$icinga.num_services_unknown\$/g;

    if (
    $str =~ /\$(TOTALHOSTSDOWNUNHANDLED)\$/ ||
    $str =~ /\$(TOTALHOSTSUNREACHABLEUNHANDLED)\$/ ||
    $str =~ /\$(TOTALHOSTPROBLEMS)\$/ ||
    $str =~ /\$(TOTALHOSTPROBLEMSUNHANDLED)\$/ ||
    $str =~ /\$(TOTALSERVICESWARNINGUNHANDLED)\$/ ||
    $str =~ /\$(TOTALSERVICESCRITICALUNHANDLED)\$/ ||
    $str =~ /\$(TOTALSERVICESUNKNOWNUNHANDLED)\$/ ||
    $str =~ /\$(TOTALSERVICEPROBLEMS)\$/ ||
    $str =~ /\$(TOTALSERVICEPROBLEMSUNHANDLED)\$/
    ) {
        beVerbose("Migrate Runtime Macros", "Cannot convert $1 - manual interaction required.");
    }

    return $str;
}

1;

# vi: sw=4 ts=4 expandtab :

