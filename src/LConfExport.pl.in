#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2012 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.

=head1 NAME

LConfExport.pl - export a Nagios / Icinga config from LConf

=head1 SYNOPSIS

LConfExport.pl	-o <output dir>
				[-v]
				[-d]
				[-f]
				[-h]
				[-V]
				
Export a Nagios / Icinga config from LConf

=head1 OPTIONS

=over

=item -o|--output <output dir>

Output dir for config

=item -v|--verbose [<path to logfile>]

Verbose mode. If no logfile specified, verbose output will be printed to STDOUT

=item -d|--debug [<path to logfile>]

Debug mode. If no logfile specified, debug output will be printed to STDOUT

=item -f|--filter <hostname>

Export only this host (e.g. for debugging)

=item -h|--help

print help page

=item -V|--version

print plugin version

=cut

# basic perl includes
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use File::Basename;
use Net::LDAP;
use Data::Dumper;
use POSIX qw/strftime/;
use Fcntl qw(:flock);
use Storable qw(dclone);
use Scalar::Util qw/reftype/;

# set lib path
use lib dirname(__FILE__);

# lconf includes
use etc::config;
use lib::ldap;
use lib::generate;
use lib::misc;

# version string
my $version = '1.3rc';

# define states
our @state = ('OK', 'WARNING', 'ERROR', 'UNKNOWN');

# get command-line parameters
our $opt;
GetOptions(
	"o|output=s"	=> \$opt->{outputDir},
	"v|verbose:s"	=> \$opt->{verbose},
	"d|debug:s"	=> \$opt->{debug},
	"f|filter=s"	=> \$opt->{filter},
	"h|help"		=> \$opt->{help},
	"V|version"	=> \$opt->{version}
);

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# help and version page
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# should print version?
if (defined $opt->{version}) { print $version."\n"; exit 0; }

# should print help?
if ($opt->{help} || !$opt->{outputDir}) { pod2usage(1); }


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# let's go!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# define vars
use vars qw($cfg %itemMap);
our $exit; $exit->{code} = 0; $exit->{message} = 'No errors';
$cfg->{ldap}->{baseDN} = $cfg->{export}->{exportDN}.','.$cfg->{ldap}->{rootDN};

# fist of all... check if we're ready to run
LeaveScript(2, "Variable '\$cfg->{ldap}->{server}' not set in config.pm'") 	if !$cfg->{ldap}->{server};
LeaveScript(2, "Variable '\$cfg->{ldap}->{rootDN}' not set in config.pm'") 	if !$cfg->{ldap}->{rootDN};
LeaveScript(2, "Variable '\$cfg->{export}->{user}' not set in config.pm'")	if !$cfg->{export}->{user};
LeaveScript(2, "Variable '\$cfg->{export}->{exportDN}' not set in config.pm'")	if !$cfg->{export}->{exportDN};
LeaveScript(2, "Variable '\$cfg->{export}->{treerewrite}' not set in config.pm'")	if !$cfg->{export}->{treerewrite};

# export with right user?
LeaveScript(2, "You're not user '$cfg->{export}->{user}'!") if $ENV{USER} ne $cfg->{export}->{user};

# export already running?
open(LOCK, ">$cfg->{export}->{lock}") or LeaveScript(2, "Cannot open $cfg->{export}->{lock}");
flock(LOCK, LOCK_EX|LOCK_NB) or LeaveScript(2, "LConfExport locked! Someone is already using it!");

# check output dir
LeaveScript('2', "'$opt->{outputDir}' is not a directory") if !-d $opt->{outputDir};
LeaveScript('2', "'$opt->{outputDir}' is not writeable")   if !-w $opt->{outputDir};

# clean old output dir
	DebugOutput('REMOVE OLD CONFIG', "start - folder: $opt->{outputDir}");
	
	# check if output dir is already labeled?
	if (!-f "$opt->{outputDir}/lconf.identify") {
		print "It looks like you generate a config into '$opt->{outputDir}' for the first time.\n";
		print "May lconf delete the folder content?\n\n";
		print "execute 'rm -r $opt->{outputDir}/*' (y/n) ";
		my $result = <STDIN>;
		print "\n";
		LeaveScript('3', "Directory cleanup canceled...") if $result =~ /^n/i;
	}
	
	qx(rm -r $opt->{outputDir}/* 2>/dev/null);
	DebugOutput('REMOVE OLD CONFIG', "finished - folder: $opt->{outputDir}");

#
# NOW, WE'RE READY TO RUN :)
#

# connect to LDAP server
our $ldap;
if ($cfg->{ldap}->{binddn} && $cfg->{ldap}->{bindpw}) {
	$ldap = LDAPconnect('auth');	
} else {
	$ldap = LDAPconnect();
}

# get last timestamp
my $timestamp;
if (-f $cfg->{export}->{timestamp}) {
	open(FH, "<$cfg->{export}->{timestamp}") || die "Can't read data: $cfg->{export}->{timestamp}$!\n";
	$timestamp = <FH>;
	chomp($timestamp);
	close(FH);
}

# set timestamp
open(FH, "+>$cfg->{export}->{timestamp}") || die "Can't write data: $cfg->{export}->{timestamp}$!\n";
print FH strftime('%Y%m%d%H%M%SZ',localtime(time-3600));
close(FH);

# get the whole config from ldap
my $CONFIG = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "objectclass=*");

# search last modified items
my $DIFF_EXPORT = ();
if (defined $cfg->{export}->{onlydiffs} && $cfg->{export}->{onlydiffs} == 1) {
	my $LASTMODIFIED = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "(|(modifyTimestamp>=$timestamp)(createTimestamp>=$timestamp))");
	foreach my $val1 (keys %{$LASTMODIFIED}) {
		my $QUEUE;

		if ($LASTMODIFIED->{$val1}->{objectclass} =~ /$cfg->{ldap}->{prefix}Host/i) {
			$DIFF_EXPORT->{$LASTMODIFIED->{$val1}->{dn}} = $LASTMODIFIED->{$val1}->{dn};
		} else {
			# search for links
			# split and reverse the DN
			my $searchDN = $val1;
			$searchDN =~ s/,$cfg->{ldap}->{rootDN}//;
			my @search = split(",", $searchDN);
			@search = reverse(@search);

			# search at rootDN...
			$searchDN = $cfg->{ldap}->{rootDN};
			my $LINKED = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "aliasedobjectname=$searchDN");
			foreach my $link (keys %{$LINKED}) { $link =~ s/^ou=//; $QUEUE->{$link} = $link; }

			# ...and search rest of the three
			foreach (@search) {
				$searchDN = $_.",".$searchDN;
				my $LINKED = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "aliasedobjectname=$searchDN");
				foreach my $link (keys %{$LINKED}) { $link =~ s/^ou=//;  $QUEUE->{$link} = $link; }
			}

			if ($LASTMODIFIED->{$val1}->{objectclass} =~ /alias/i || $LASTMODIFIED->{$val1}->{objectclass} =~ /extensibleObject/i) { $val1 =~ s/^ou=//; }

			$QUEUE->{$val1} = $val1;

			foreach my $do (keys %{$QUEUE}) {
				my @splitted = split('ou=', $do, 2);
				if ($#splitted == 1) { $do = 'ou='.$splitted[1]; } else { $do = 'ou='.$splitted[0]; }

				my $TMP_HOSTS = LDAPsearch($ldap, $do, "sub", "objectclass=$cfg->{ldap}->{prefix}Host");
				foreach (keys %{$TMP_HOSTS}) {
				        $DIFF_EXPORT->{$_} = $_;
				}
			}
		}
	}
}

# get all clients to monitor
my $CLIENTS = HashGrep($CONFIG, 'objectclass', $cfg->{ldap}->{prefix}.'Host$');
	# modify $CLIENTS if $cfg->{export}->{onlydiffs} was set
	if ($cfg->{export}->{onlydiffs}) {
		foreach my $client (keys %{$CLIENTS}) {
			delete $CLIENTS->{$client} if !defined $DIFF_EXPORT->{$client};
		}
	}

	# modify $CLIENTS if a filter was set
	if (defined $opt->{filter}) { my $tmp_hash = HashGrep($CLIENTS, 'cn', $opt->{filter}); $CLIENTS = $tmp_hash; }

# drop all hosts obove baseDN (eg. examples)
foreach my $client (keys %{$CLIENTS}) {
	delete $CLIENTS->{$client} if $client !~ /$cfg->{ldap}->{baseDN}$/;
}
	
# run custom script (pre)
if (-f '@PREFIX@/custom/pre.pl') {
	require '@PREFIX@/custom/pre.pl';
	$CLIENTS = CustomPre($CLIENTS);
}

# build configuration
foreach my $client (keys %{$CLIENTS}) {
	beVerbose("CFG BUILD", "Host $client");
	
	my %TREE = ();
	%TREE = TreeBuilder($client, $CONFIG, \%TREE);
	
	$CLIENTS = BuildHostConfig($client, $CLIENTS, \%TREE);
}

# run custom script (mid)
if (-f '@PREFIX@/custom/mid.pl') {
	require '@PREFIX@/custom/mid.pl';
	$CLIENTS = CustomMid($CLIENTS);
}

# create output dirs and generate config
createDirs($cfg->{ldap}->{baseDN}, $opt->{outputDir});  # TODO: Umbauen damit er ohne LDAPsearch funktioniert??
mkdir("$opt->{outputDir}/hostgroups/");
mkdir("$opt->{outputDir}/servicegroups/");
mkdir("$opt->{outputDir}/serviceescalations/");
mkdir("$opt->{outputDir}/hostescalations/");
copyGeneric(dirname(__FILE__)."/etc/default-templates.cfg", $opt->{outputDir});
genTimeperiods($CONFIG);
genCommands($CONFIG);
genContacts($CONFIG);
genContactgroups($CONFIG);
genHostgroups($CONFIG, $CLIENTS);
genServicegroups($CONFIG, $CLIENTS);
genHostConfig($CLIENTS);

# run custom script (post)
if (-f '@PREFIX@/custom/post.pl') {
	require '@PREFIX@/custom/post.pl';
	$CLIENTS = CustomPost($CLIENTS);
}

# create identifier
open(FH, ">$opt->{outputDir}/lconf.identify") || die "Can't write data: $opt->{outputDir}/lconf.identify $!\n"; close(FH);

# disconnect from LDAP Server
beVerbose("LDAP DISCONNECT", "disconnected from ldap host");
$ldap->unbind();

# just modify the hashdump, if $CLIENTS if $cfg->{export}->{onlydiffs} was set
if ($cfg->{export}->{onlydiffs} && $cfg->{export}->{onlydiffs} == 1) {
	# import hashdump
	my $data; my $VAR1;
	open FILE, "<$cfg->{export}->{hashdump}" or die $!; while(<FILE>) { $data .= $_; } close FILE;
	eval($data);

	# merge hashdumps
	foreach (keys %{$CLIENTS}) {
		$VAR1->{$_} = $CLIENTS->{$_};
	}
	$CLIENTS = $VAR1;
}

# dump data to filesystem
my $data = Dumper($CLIENTS); open FILE, "+>$cfg->{export}->{hashdump}" or die $!; print FILE $data; close FILE;

# exit
EXIT:
LeaveScript($exit->{code}, $exit->{message});
